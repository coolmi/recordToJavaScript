// Object.defineProperty() 数据DOM的绑定
let obj = {};
let temp = {};
Object.defineProperty(obj, 'name', {
  value: 1,
  configurable: true, // 可配置的
  writable: true, // 是否可重新赋值
  enumerable: true, // 是否可枚举 循环遍历
  get() {
    return temp['name']
  },
  set(val) {
    temp['name'] = val
  }
})
delete obj.name

// {{msg}} 可以赋值、取值、三元
// vue忽略掉 selected checked 都没有意义

// 基础指令
// v-text === {{}} 防止{{}}的闪现
// v-once 只绑定一次
// v-html
// 使用v-cloak要加样式 锁定{{}}不闪烁
// [v-cloak]{display:none}

// 给data中声明未初始化的变量赋值（2种方法）
// this.$set(this.obj, 'name', '小赵') 此方法可以给对象添加响应式的数据变化
// this.obj = {name: 'xiaozhao'}
// 需要注意的是赋值是否生效
// 无法改变数组某一元素或长度，在vue中是监控不到的  错误：this.arr[0] = 100; this.arr.length -=2
// vue中操作数组变异的方法 pop push shift unshift sort reseve splice filter map

// axios的使用
axios.get('XXX').then(function (res) {
  // 成功
}, function (err) {
  // 失败
})

// promise的使用 解决回调的问题 三个状态：成功、失败、等待
// resolve 成功态
// reject 失败态 resolve和reject均是函数
// promise实例有then方法 then方法中有两个函数参数
let p = new Promise((resolve, reject) => {
  // resolve(a)
  reject(a);
})
p.then((data) => {console.log(data);},(err) => {console.log(err);})

// ajax 请求 调用promise
function ajax({url='',type='get',datatype='json'}) {
      return new Promise((resolve, reject)=> {
        let xhr = new XMLHttpRequest();
        xhr.open(type,url,true);
        xhr.responseType = datatype;
        xhr.onload = function() {
          resolve(xhr.response);
        };
        xhr.onerror = function(err) {
          reject(err);
        };
        xhr.send();
      })
}

// 计算属性 变量名不能和data中的变量重名  有get()和set()两个方法 如果是属性函数的话，默认调取get()函数
// 在created中加载的数据，通过ajax获取的方法不会先执行
// 单选框要获取实时数据，就要调取@change方法
// computed和watch的区别
// computed 计算属性，不是方法 可以通过缓存计算
// watch可以进行异步监听调用
// 动态绑定，后面设定会把前面的设定覆盖 存在两种写法 一种是对象，一种是数组
// VUE的全局过滤器 Vue.filter

// 自定义指令
// directives  定义指令
// fn(el,bindings) {
//   bindings.value // DOM的值 el当前DOM
//   el.focuse();
// }
// 指令命名color-dd 遵循驼峰命名规则colorDd
localStorage.setItem('data',this.data)
localStorage.getItem('data')
// watch:{
//   todos:{ // watch默认只监控一层的数据变化（以下是深度监控）
//     handler () { // 默认写成函数就相当于默写了个handler
//       // localStroage默认存储字符串
//       localStorage.setItem('data',JSON.stringify(this.data)); // 存在本地数据
//     }, deep:true;
//   }
// }
// 从本地取数据
// this.data = JSON.parse(localStorage.getItem('data')) || this.data
// this.$set 后加的属性实现响应式变化
// this.$options vm上的所有属性
// this.$nextTick(()=>{//异步方法})
// this.$refs // 可以获取当前DOM对象，如果DOM不是v-for循环出来的，只能获取一个，通过v-for可以循环获取多个

// 全局组件
// 注意： 1.组件名不要大写，单词之间用-代替  2.只要组件名和定义名字相同是可以的（首字母可以大写）
Vue.component('myHandsome',{ // 一个对象可以看成一个组件
  template:'<div>{{msg}}</div>',
  data(){// 组件中的数据必须是函数类型 返回一个实例作为组件的数据
    return {msg:'我很英俊'}
  }
});
// 局部组件  三部曲  1.创建组件  2.注册组件  3.使用组件

// [https://s.taobao.com/search?ie=utf8&initiative_id=staobaoz_20190128&stats_click=search_radio_all%3A1&js=1&imgfile=&q=%E9%9A%86%E5%8A%9B%E5%A5%87%E6%97%A0%E7%A1%85%E6%B2%B9%E6%B4%97%E5%8F%91%E6%B0%B4%E5%A5%97%E8%A3%85&suggest=0_1&_input_charset=utf-8&wq=longliqi%E6%97%A0%E7%A1%85%E6%B2%B9%E6%B4%97%E5%8F%91%E6%B0%B4&suggest_query=longliqi%E6%97%A0%E7%A1%85%E6%B2%B9%E6%B4%97%E5%8F%91%E6%B0%B4&source=suggest]
// {https://item.taobao.com/item.htm?spm=a230r.1.14.121.2592529aY0EHzR&id=577296559921&ns=1&abbucket=15#detail}
// {https://item.taobao.com/item.htm?spm=a230r.1.14.127.2592529aY0EHzR&id=567118164242&ns=1&abbucket=15#detail}
//
// https://detail.tmall.com/item.htm?spm=a230r.1.14.54.2592529aY0EHzR&id=563845393185&ns=1&abbucket=15
//
//   https://detail.tmall.com/item.htm?spm=a230r.1.14.13.2592529aY0EHzR&id=534980582298&cm_id=140105335569ed55e27b&abbucket=15&skuId=3866478832918
//     https://detail.tmall.com/item.htm?spm=a230r.1.14.20.2592529aY0EHzR&id=558385190301&ns=1&abbucket=15
